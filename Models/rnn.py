# -*- coding: utf-8 -*-
"""RNN.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1VdM6YVexAi7T6PBdFuelnr96A2Cxh0tz

# Data Pre-Process
load in necessary assets and extract data into variables
"""

# load dataset in

from keras.datasets import mnist
(train_X, train_Y), (test_X,test_Y) = mnist.load_data(path='mnist.npz')

# Commented out IPython magic to ensure Python compatibility.
# analyze and locate relevant values from data
import numpy as np
import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
from keras.utils import to_categorical
import matplotlib.pyplot as plt

# %matplotlib inline

# find the unique numbers from the train labels
classes = np.unique(train_Y)
nClasses = len(classes)

# Data Pre-process
train_X = train_X / 255.
test_X = test_X / 255. 

# partition training data 
from sklearn.model_selection import train_test_split
train_X, valid_X, train_label, valid_label = train_test_split(train_X, train_Y, test_size=0.2, random_state=13)

"""# Recurrent Neural Network

## Model Definition

each input sequence will be a size of 28x28 (where the height is treated as a timestep)
"""

batch_size = 64
input_dim = 28

units = 64
output_size = nClasses # labels are from 0 to 9 (10 in total)

#RNN Model def
def build_model(allow_cudnn_kernel=True): # uses GPU if available
  #CuDNN only at layer level, not cell level
  #LSTM(units) will use the CuDNN kernel,
  #RNN(LSTMCell(units)) will not
  if allow_cudnn_kernel:
    # go with default option to use CuDNN
    lstm_layer = keras.layers.LSTM(units, input_shape=(None, input_dim))
  else:
    # wrapping LSTMCell in rnn layer will not use CuDNN
    lstm_layer = keras.layers.RNN(
        keras.layers.LSTMCell(units), input_shape=(None, input_dim)
    )
  model = keras.models.Sequential(
      [
      lstm_layer,
      keras.layers.BatchNormalization(),
      keras.layers.Dense(output_size),
      ]
  )
  return model

"""## Build Model"""

rnn_model = build_model(allow_cudnn_kernel=True) # use CuDNN

rnn_model.compile(
    loss=keras.losses.SparseCategoricalCrossentropy(from_logits=True), # sparse does not use one hot encoding
    optimizer="sgd",
    metrics=["accuracy"]
)

rnn_model.summary()

"""## Fit Model"""

rnn_train = rnn_model.fit(
    train_X,
    train_label,
    batch_size=batch_size,
    epochs=20,
    validation_data=(valid_X, valid_label)
)

"""## Evaluate Model"""

test_eval = rnn_model.evaluate(test_X, test_Y, verbose=0)

print('Test loss: ', test_eval[0])
print('Test accuracy: ', test_eval[1])

"""## Loss and Accuracy Plots"""

accuracy = rnn_train.history['accuracy']
val_accuracy = rnn_train.history['val_accuracy']
loss = rnn_train.history['loss']
val_loss = rnn_train.history['val_loss']
epochs = range(len(accuracy))
plt.plot(epochs, accuracy, 'bo', label='Training accuracy')
plt.plot(epochs, val_accuracy, 'b', label='Validation accuracy')
plt.title('Training and validation accuracy')
plt.legend()
plt.figure()
plt.plot(epochs, loss, 'bo', label='Training loss')
plt.plot(epochs, val_loss, 'b', label='Validation loss')
plt.title('Training and validation loss')
plt.legend()
plt.show()

"""## Save Model"""

# Save the entire model as a SavedModel.
!mkdir -p saved_model
rnn_model.save('saved_model/rnn_number_model.h5py')

"""# Predict Labels"""

predicted_classes = rnn_model.predict(test_X)

predicted_classes = np.argmax(np.round(predicted_classes), axis=1)

predicted_classes.shape, test_Y.shape

"""find where the model predicted correctly and incorrectly and show a sample set from each"""

correct = np.where(predicted_classes==test_Y)[0]
print("Found {} correct labels".format(len(correct)))

for i, correct in enumerate(correct[:9]):
  plt.subplot(3,3,i+1)
  plt.imshow(test_X[correct].reshape(28,28), cmap='gray', interpolation='none')
  plt.title("Predicted {}, Class {}".format(predicted_classes[correct], test_Y[correct]))
  plt.tight_layout()

incorrect = np.where(predicted_classes!=test_Y)[0]
print("Found {} incorrect labels".format(len(incorrect)))

for i, incorrect in enumerate(incorrect[:9]):
  plt.subplot(3,3,i+1)
  plt.imshow(test_X[incorrect].reshape(28,28), cmap='gray', interpolation='none')
  plt.title("Predicted {}, Class {}".format(predicted_classes[incorrect], test_Y[incorrect]))
  plt.tight_layout()

"""## Classification Report

Here we can see, specifically, which categories this model has classified correctly and incorrectly
"""

from sklearn.metrics import classification_report
target_names = ["Class {}".format(i) for i in range(output_size)]
print(classification_report(test_Y, predicted_classes, target_names=target_names))